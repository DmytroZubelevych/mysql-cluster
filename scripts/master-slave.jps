type: update
id: mysql-asynchronous-cluster
name: Asynchronous Database Cluster
description: 'DB Auto Clustering: 1 x Master + N x Slave'

success:
  text: "../texts/phpmyadmin-credentials.md"

nodeGroupAlias:
  "${targetNodes.nodeGroup}": sqldb

onBeforeCloneNodes[sqldb]:
  - getSlaveId
  - cloneSlave:
      slaveId: ${response.slaveId}
  - stopEvent:
      type: warning
      message: New slave via cloning is completed

globals:
  PATH: "${settings.path}"
  DB_USER: "${settings.db_user}"
  DB_PASS: "${settings.db_pass}"
  SCHEME: "${settings.scheme}"
  REPLICATION_USER: repl-${fn.random}
  REPLICATION_PASS: "${fn.password(20)}"
  CUSTOM_CONF: "${settings.custom_conf}"

onInstall:
  - setScalingMode
  - setupMaster:
      id: "${nodes.sqldb.master.id}"
  - forEach(i:nodes.sqldb):
      if (!${@i.ismaster}):
        addSlave:
          id: "${@i.id}"
          masterId: "${nodes.sqldb.master.id}"

  - return:
      result: success

actions:

  setupReplication:
    - if (/mariadb/.test("${nodes.sqldb.nodeType}")):
        cmd[${this.id}]: |-
          yum install https://downloads.mysql.com/archives/get/p/29/file/mysql-connector-python-8.0.11-1.el7.x86_64.rpm -y &>> /var/log/run.log
          yum install https://downloads.mysql.com/archives/get/p/30/file/mysql-utilities-1.6.5-1.el7.noarch.rpm -y &>> /var/log/run.log
          ln -s /usr/lib/python2.7/site-packages/mysql/utilities /usr/lib64/python2.7/site-packages/mysql/utilities
        user: root
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/scripts/setupReplication.sh -O ~/setupReplication.sh &>> /var/log/run.log
        bash ~/setupReplication.sh node${this.masterId} node${this.id} ${globals.DB_USER} ${globals.DB_PASS} ${globals.REPLICATION_USER} ${globals.REPLICATION_PASS} &>> /var/log/run.log


  setupUser:
    cmd[${this.id}]: |-
      wget ${globals.PATH}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.DB_USER} ${globals.DB_PASS} &>> /var/log/run.log
    user: root

  setupMaster:
    - addCustomConfig:
        id: "${this.id}"
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/master.cnf
    - setupUser:
        id: "${this.id}"
    - setNodeDisplayName[${this.id}]: Master

  setupSlave:
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/configs/slave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log
        sed -i "s/server-id.*/server-id = ${this.id}/" /etc/mysql/conf.d/slave.cnf
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/slave.cnf
    - setNodeDisplayName[${this.id}]: Slave
  
  addSlave:
    - addCustomConfig:
        id: "${this.id}"
    - setupSlave:
        id: "${this.id}"
    - setupUser:
        id: "${this.id}"
    - setupReplication:
        id: "${this.id}"
        masterId: "${this.masterId}"

  addCustomConfig:
    if (!/settings.custom_conf/.test("${globals.CUSTOM_CONF}")):
      cmd[${this.id}]: cd /etc/mysql/conf.d && wget ${globals.CUSTOM_CONF} &>> /var/log/run.log
      
  getSlaveId:
    - script: |
        var api = [], slaveId;
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
        if (resp.result != 0) return resp;
        for (var i = 0, k = resp.nodes; i < k.length; i++) {
           if ((k[i].nodeGroup == 'sqldb') && (!k[i].ismaster)) 
              slaveId = k[i].id;
        }
        return { result: 0, slaveId: slaveId }

  cloneSlave:
    - cmd[${this.slaveId}]: sudo /etc/init.d/mysql stop
    - api: environment.control.AddNode
      nodeGroup: sqldb
      nodeid: ${this.slaveId}
      nodeType: ${nodes.sqldb.nodeType}
    - set:
        newSlaveId: ${response.node.id}
    - setNodeDisplayName[${nodes.sqldb.master.id}]: ${nodes.sqldb.master.displayName}
    - cmd[${this.slaveId}]: sudo /etc/init.d/mysql start
    - cmd[${this.newSlaveId}]: |-
        rm -f /var/lib/mysql/auto.cnf;
        sed -i "s/server-id.*/server-id = ${this.newSlaveId}/" /etc/mysql/conf.d/slave.cnf;
        sed -i "s/report_host.*/report_host = node${this.newSlaveId}/" /etc/mysql/conf.d/slave.cnf;
        sudo /etc/init.d/mysql restart;
    - setNodeDisplayName[${this.newSlaveId}]: Slave
    
  setScalingMode:
    - api: jelastic.env.control.ApplyNodeGroupData
      nodeGroup: sqldb
      data:
        scalingMode: STATEFUL
