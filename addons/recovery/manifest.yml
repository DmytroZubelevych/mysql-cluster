
type: update
name: Database Cluster recovery solution
id: db-recovery

targetNodes:
  nodeGroup: sqldb

globals:
  ssh_root: /root/.ssh/
  ssh-key: id_rsa_db_monitoring
  tmp: /tmp/

buttons:
  - name: diagnostic
    caption: Cluster Diagnostic
    confirmText: Make cluster diagnostic?
    loadingText: Diagnostic is in progress...
    logsPath: /var/log/db_recovery.log
    action: diagnostic
    
  - name: recovery
    caption: Automated Recovery
    loadingText: Automated Recovery is in progress...
    successText: Automated Recovery finished successfully!
    action: recovery
    settings: recovery

settings:
  recovery:
    submitUnchanged: true
    fields:
      - name: user
        caption: User
        type: string        
      - name: password
        caption: Password
        type: string

onInstall: generate-share-keys

responses:
  200:
    type: success
    message: Congratulations! There are no errors have been found
    
  201:
    type: success
    message: Congratulations! Database Cluster revovering has been finished successfully!

  98:
    type: success
    message: |
      An error occuers while recovering the Database Cluster.  
      Please check the **/var/log/db_recovery.log** log file for details.
      For **manual recovery** please folow the link - [Galera Cluster Recover – Multi-Cloud PaaS and CaaS for Business.pdf](https://jelastic.team/secure/attachment/106222/106222_Galera+Cluster+Recover+%E2%80%93+Multi-Cloud+PaaS+and+CaaS+for+Business.pdf)

  99:
    type: success
    message: |
      An error occuers while diagnostic the Database Cluster.  
      Please check the **/var/log/db_recovery.log** log file for details.  For **automatic recovery** please click the 'Automated Recovery' in add-ons tab  
      For **manual recovery** please folow the link - [Galera Cluster Recover – Multi-Cloud PaaS and CaaS for Business.pdf](https://jelastic.team/secure/attachment/106222/106222_Galera+Cluster+Recover+%E2%80%93+Multi-Cloud+PaaS+and+CaaS+for+Business.pdf)

actions:
  diagnostic:
    script: https://raw.githubusercontent.com/lazarenkoalexey/mysql-cluster/v2.5.0/scripts/db-diagnostic.js
    exec: ' --diagnostic'

  recovery:
    script: https://raw.githubusercontent.com/lazarenkoalexey/mysql-cluster/v2.5.0/scripts/db-diagnostic.js
    user: ${settings.user:}
    password: ${settings.password:}
    
  generate-share-keys:
    - cmd[${nodes.sqldb.master.id}]: |-
        ssh-keygen -t rsa -b 4098 -f ${globals.tmp}${globals.ssh-key} -q -N '' -C 'db cluster monitoring' <<<y >/dev/null 2>&1
        chown mysql:mysql ${globals.tmp}${globals.ssh-key}*
      user: root
    - script: |
        var resp;
        
        resp = api.environment.file.Read({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}.pub",
          nodeid: "${nodes.sqldb.master.id}" 
        });
        if (resp.result != 0) return resp;
        
        resp =  api.environment.file.Write({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}.pub",
          nodeGroup: "sqldb",
          nodeid: "-1",
          body: resp.body
        });
        if (resp.result != 0) return resp;
        
        resp = api.environment.file.Read({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}",
          nodeid: "${nodes.sqldb.master.id}" 
        });
        if (resp.result != 0) return resp;
        
        return api.environment.file.Write({
          envName: "${env.name}",
          session: session,
          path: "${globals.tmp}${globals.ssh-key}",
          nodeGroup: "sqldb",
          nodeid: "-1",
          body: resp.body
        });
    - cmd [sqldb]: |-
        mv ${globals.tmp}${globals.ssh-key}* ${globals.ssh_root}
        cat ${globals.ssh_root}${globals.ssh-key}.pub >> ${globals.ssh_root}authorized_keys
      user: root
